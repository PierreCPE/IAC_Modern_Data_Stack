#!/bin/bash
# Script Bash pour d√©ployer le pipeline Azure Entreprise
# Usage: ./deploy_enterprise_pipeline.sh

set -e  # Exit on error

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

echo -e "${GREEN}=== Configuration Pipeline Azure Entreprise ===${NC}"

# V√©rifier si .env existe
if [ ! -f ".env" ]; then
    echo -e "${RED}‚ùå Fichier .env non trouv√©${NC}"
    echo -e "${YELLOW}üìù Cr√©ez un fichier .env bas√© sur .env.example avec votre connection string Azure${NC}"
    echo -e "${YELLOW}üí° Exemple: cp .env.example .env${NC}"
    exit 1
fi

# Charger les variables d'environnement depuis .env
echo -e "${BLUE}üìÅ Chargement des variables d'environnement...${NC}"
while IFS= read -r line; do
    # Ignorer les commentaires et lignes vides
    [[ $line =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    
    # Traiter les lignes export
    if [[ $line =~ ^export[[:space:]]+([^=]+)=(.*)$ ]]; then
        var_name="${BASH_REMATCH[1]}"
        var_value="${BASH_REMATCH[2]}"
        
        # Supprimer les guillemets si pr√©sents
        var_value=$(echo "$var_value" | sed 's/^"\(.*\)"$/\1/')
        
        # Exporter la variable
        export "$var_name"="$var_value"
        echo -e "${GRAY}   ‚úì $var_name configur√©${NC}"
    fi
done < .env

# V√©rifier la connection string
if [ -z "$TF_VAR_azure_connection_string" ]; then
    echo -e "${RED}‚ùå TF_VAR_azure_connection_string non d√©finie${NC}"
    echo -e "${YELLOW}üí° V√©rifiez votre fichier .env${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Variables d'environnement charg√©es${NC}"

# V√©rifier que terraform est install√©
if ! command -v terraform &> /dev/null; then
    echo -e "${RED}‚ùå Terraform n'est pas install√©${NC}"
    echo -e "${YELLOW}üí° Installez Terraform: https://www.terraform.io/downloads${NC}"
    exit 1
fi

# Initialiser Terraform
echo -e "${BLUE}üèóÔ∏è  Initialisation Terraform...${NC}"
if ! terraform init; then
    echo -e "${RED}‚ùå Erreur lors de l'initialisation Terraform${NC}"
    exit 1
fi

# Planifier le d√©ploiement
echo -e "${BLUE}üìã Planification du d√©ploiement...${NC}"
if ! terraform plan -out=tfplan; then
    echo -e "${RED}‚ùå Erreur lors de la planification${NC}"
    exit 1
fi

# Demander confirmation
echo ""
read -p "üöÄ Voulez-vous appliquer ce plan ? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}üöÄ Application du plan...${NC}"
    
    if terraform apply tfplan; then
        echo ""
        echo -e "${GREEN}‚úÖ D√©ploiement r√©ussi !${NC}"
        echo ""
        echo -e "${BLUE}üìä Informations du pipeline :${NC}"
        terraform output connection_info
        echo ""
        echo -e "${BLUE}üîó Prochaines √©tapes :${NC}"
        terraform output deployment_info
        
        # Nettoyer le plan
        rm -f tfplan
    else
        echo -e "${RED}‚ùå Erreur lors du d√©ploiement${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ùå D√©ploiement annul√©${NC}"
    rm -f tfplan
fi

echo ""
echo -e "${CYAN}üéØ Pipeline configur√© :${NC}"
echo -e "${WHITE}   [Azure Blob: source-test] --> (Airbyte) --> [Azure Blob: raw-data]${NC}"
echo ""
echo -e "${YELLOW}üìù Prochaine √©tape : Configurer Azure Function pour [raw-data] --> [parquet]${NC}"

# Afficher les informations utiles
echo ""
echo -e "${BLUE}üìã Informations utiles :${NC}"
echo -e "${GRAY}   ‚Ä¢ Interface Airbyte : http://localhost:8000${NC}"
echo -e "${GRAY}   ‚Ä¢ Login Airbyte : airbyte / password${NC}"
echo -e "${GRAY}   ‚Ä¢ Containers Azure : source-test ‚Üí raw-data ‚Üí parquet${NC}"
echo ""
echo -e "${GREEN}üéâ Configuration termin√©e avec succ√®s !${NC}"
